I" =<h1 id="효율적인-파이썬-코드-쓰는-법">효율적인 파이썬 코드 쓰는 법</h1>

<h2 id="1-foundations-for-efficiencies">1. Foundations for efficiencies</h2>

<h3 id="효율적인-프로그래밍이란">효율적인 프로그래밍이란?</h3>

<ul>
  <li>
    <p>빠르고, 실행과 결과 반환 사이의 대기 시간이 짧습니다.</p>
  </li>
  <li>
    <p>리소스를 능숙하게 할당하고 불필요한 오버 헤드를 받지 않습니다.</p>
  </li>
</ul>

<p>빠른 런타임과 작은 메모리 사용량에 대한 정의는 작업에 따라 달라집니다.
효율적인 코드 작성의 목표는 지연 시간과 오버헤드를 모두 줄이는 것입니다.</p>

<p><br /></p>

<h3 id="python">Python</h3>

<p>파이썬은 코드 가독성을 자랑하는 언어입니다.</p>

<p>파이썬 코드를 작성하는 것을 종종 Pythonic 코드라고도 합니다. (처음 들어봤네요..)</p>

<p>Pythonic 코드는 덜 정황하고 해석하기 쉬운 경향이 있습니다.</p>

<ul>
  <li>Non - Pythonic 코드
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">double_number</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)):</span>
  <span class="n">double_numbers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">number</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>Pythonic 코드
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doubled_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>파이썬은 기본 원칙을 따르지않는 코드를 지원하지만 이러한 유형의 코드는 느리게 실행되는 경향이 있습니다.</p>

<p>몰랐던 사실 : 인라인 코드 쓰는이유가 단순히 보기 이뻐서 ( 가독성 ) 때문인 줄 알았는데, 직접해보니 속도차이가 엄청 나네요….</p>

<p><br /></p>

<h3 id="파이썬-철학">파이썬 철학</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">this</span>

<span class="n">The</span> <span class="n">Zen</span> <span class="n">of</span> <span class="n">Python</span><span class="p">,</span> <span class="n">by</span> <span class="n">Tim</span> <span class="n">Peters</span>

<span class="n">Beautiful</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">ugly</span><span class="p">.</span>
<span class="n">Explicit</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">implicit</span><span class="p">.</span>
<span class="n">Simple</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="nb">complex</span><span class="p">.</span>
<span class="n">Complex</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">complicated</span><span class="p">.</span>
<span class="n">Flat</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">nested</span><span class="p">.</span>
<span class="n">Sparse</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">dense</span><span class="p">.</span>
<span class="n">Readability</span> <span class="n">counts</span><span class="p">.</span>
<span class="n">Special</span> <span class="n">cases</span> <span class="n">aren</span><span class="s">'t special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you'</span><span class="n">re</span> <span class="n">Dutch</span><span class="p">.</span>
<span class="n">Now</span> <span class="ow">is</span> <span class="n">better</span> <span class="n">than</span> <span class="n">never</span><span class="p">.</span>
<span class="n">Although</span> <span class="n">never</span> <span class="ow">is</span> <span class="n">often</span> <span class="n">better</span> <span class="n">than</span> <span class="o">*</span><span class="n">right</span><span class="o">*</span> <span class="n">now</span><span class="p">.</span>
<span class="n">If</span> <span class="n">the</span> <span class="n">implementation</span> <span class="ow">is</span> <span class="n">hard</span> <span class="n">to</span> <span class="n">explain</span><span class="p">,</span> <span class="n">it</span><span class="s">'s a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let'</span><span class="n">s</span> <span class="n">do</span> <span class="n">more</span> <span class="n">of</span> <span class="n">those</span><span class="err">!</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="python-표준-라이브러리">Python 표준 라이브러리</h3>

<h4 id="type">Type</h4>

<ul>
  <li>List</li>
  <li>Tuple</li>
  <li>Set</li>
  <li>Dict</li>
</ul>

<p><br /></p>

<h4 id="function">Function</h4>

<ul>
  <li>print()</li>
  <li>len()</li>
  <li>range()</li>
  <li>round()</li>
  <li>enumerate()</li>
  <li>map()</li>
  <li>zip()</li>
  <li>and others</li>
</ul>

<p><br /></p>

<h4 id="modules">modules</h4>

<ul>
  <li>os</li>
  <li>sys</li>
  <li>itertools</li>
  <li>collections</li>
  <li>math</li>
  <li>and others</li>
</ul>

<p><br /></p>

<h4 id="range">range</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">)</span>
<span class="n">nums_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_list</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>

<span class="c1"># 2칸씩 건너뛰며
</span><span class="n">nums</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">nums_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_list</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="enumerate">enumerate()</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">]</span>
<span class="n">indexed_letters</span> <span class="o">=</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">indexed_letters</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="s">'a'</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">'b'</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">'d'</span><span class="p">)]</span>

<span class="c1"># start index 설정
</span><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">]</span>
<span class="n">indexed_letters</span> <span class="o">=</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">letters</span><span class="p">,</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">indexed_letters</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">indexed_letters</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">indexed_letters</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[(</span><span class="mi">5</span><span class="p">,</span> <span class="s">'a'</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="s">'b'</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="s">'c'</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="s">'d'</span><span class="p">)]</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="map">map()</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">2.3</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">4.6</span><span class="p">,</span> <span class="mf">5.0</span><span class="p">]</span>
<span class="n">rnd_nums</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">round</span><span class="p">,</span> <span class="n">nums</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">rnd_nums</span><span class="p">))</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1"># lambda 와 같이 사용
</span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>

<span class="n">sqrd_nums</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">,</span> <span class="n">nums</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">sqrd_nums</span><span class="p">))</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</code></pre></div></div>
<p><br /></p>

<h4 id="practice">Practice</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a new list of odd numbers from 1 to 11 by unpacking a range object
</span><span class="n">nums_list2</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="p">)]</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_list2</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
</code></pre></div></div>

<p>매번 <code class="language-plaintext highlighter-rouge">list(range(1,12,2))</code> 만 사용했는데, 해보니까 <code class="language-plaintext highlighter-rouge">[*range(1,12,2)]</code>가 더 빠르고 깔끔하네요</p>

<h3 id="numpy">Numpy</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">nums_np</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_np</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">nums_np</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">int64</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 실수와 정수 둘다 포함됬을 경우
</span><span class="n">nums_np_float</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mf">2.5</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_np_float</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums_np_float</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mf">1.</span>  <span class="mf">2.5</span> <span class="mf">3.</span> <span class="p">]</span>
<span class="n">float64</span>
</code></pre></div></div>
<p>두개 이상의 형식이 있을 땐, 이를 포함하는 가장큰 형식이용</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="nb">TypeError</span>
</code></pre></div></div>
<p>Python list 같은 경우는 다음과 같은 연산이 불가</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">nums</span><span class="p">)]</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<p>다음과 같이 계산하면 가능 하지만 비효율적</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Numpy를 사용한다면?
</span><span class="n">nums</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<p>Numpy를 이용하면 간단하게 계산 가능</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Numpy indexing
</span><span class="n">nums2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
         <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]</span>

<span class="k">print</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">([</span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">nums2</span><span class="p">])</span> <span class="c1"># Numpy를 사용하지 않는다면
</span>
<span class="n">nums2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums2</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">2</span>
<span class="p">[</span><span class="mi">1</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># boolean indexing
</span><span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">nums</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">nums</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">nums</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">])</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">True</span> <span class="bp">True</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<p><br /></p>

<hr />

<h2 id="2-timing-and-profiling-code">2. Timing and profiling code</h2>

<p><br /></p>
<h3 id="using-timeit">Using %timeit</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="n">rand_nums</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">4.61</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">9.72</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p>import time 선언 후 time.time() 만 사용했었는데, %timeit 사용하니 보다 자세히 표현되네용…</p>

<p><br /></p>

<h4 id="specifying-number-of-runsloops">Specifying number of runs/loops</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">r2</span> <span class="o">-</span><span class="n">n10</span> <span class="n">rand_nums</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">5.82</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">10</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">2</span><span class="p">:</span> <span class="mf">35.6</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-r 플래그</code> 를 이용하여 실행 수를 지정하고, <code class="language-plaintext highlighter-rouge">-n 플래그</code>를 사용하여 루프 수를 지정 할 수 있음</p>

<p><br /></p>

<h4 id="using-timeit-in-line-magic-mode">Using %timeit in line magic mode</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">nums</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">nums</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">1000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">1.24</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="saving-output">Saving output</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">times</span> <span class="o">=</span> <span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">o</span> <span class="n">rand_nums</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">11.79</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">9.87</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
    
<span class="c1"># 이후 저장된 값을 출력하는법
</span><span class="n">times</span><span class="p">.</span><span class="n">timings</span>
<span class="c1"># - colab에서는 안되네요...?
</span>
<span class="n">times</span><span class="p">.</span><span class="n">best</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mf">9.871182670012786e-06</span>

<span class="n">times</span><span class="p">.</span><span class="n">worst</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mf">0.00011633400026767049</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="comparing-times">Comparing times</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f_time</span> <span class="o">=</span> <span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">o</span> <span class="n">formal_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">17.28</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">10000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">118</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
    
    
<span class="n">l_time</span> <span class="o">=</span> <span class="o">%</span><span class="n">timeit</span> <span class="o">-</span><span class="n">o</span> <span class="n">literal_dict</span> <span class="o">=</span> <span class="p">{}</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">21.33</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">10000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">53.5</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
    
<span class="c1"># average 도 colab에서는 안되네요
</span><span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="n">f_time</span><span class="p">.</span><span class="n">compile_time</span> <span class="o">-</span> <span class="n">l_time</span><span class="p">.</span><span class="n">compile_time</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span><span class="o">**</span> <span class="mi">9</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"l_time better than f_time by {} ns"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">diff</span><span class="p">))</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="code-profiling">Code profiling</h4>

<p>코드 프로파일링이란, 프로그램의 다양한 부분이 실행되는 시간과 빈도를 설명하는 데 사용되는 기술</p>

<p><code class="language-plaintext highlighter-rouge">pip install line_profiler</code> 표준라이브러리가 아니기 때문에, 따로 다운 받아야합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_units</span><span class="p">(</span><span class="n">heros</span><span class="p">,</span> <span class="n">heights</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>
    <span class="n">new_hts</span> <span class="o">=</span> <span class="p">[</span><span class="n">ht</span> <span class="o">*</span> <span class="mf">0.39370</span> <span class="k">for</span> <span class="n">ht</span> <span class="ow">in</span> <span class="n">heights</span><span class="p">]</span>
    <span class="n">new_wts</span> <span class="o">=</span> <span class="p">[</span><span class="n">wt</span> <span class="o">*</span> <span class="mf">2.20462</span> <span class="k">for</span> <span class="n">wt</span> <span class="ow">in</span> <span class="n">weights</span><span class="p">]</span>

    <span class="n">hero_data</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">hero</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">heros</span><span class="p">):</span>
        <span class="n">hero_data</span><span class="p">[</span><span class="n">hero</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_hts</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">new_wts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">hero_data</span>

<span class="o">%</span><span class="n">load_ext</span> <span class="n">line_profiler</span>
<span class="n">heroes</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Batman'</span><span class="p">,</span> <span class="s">'Superman'</span><span class="p">,</span> <span class="s">'Wonder Woman'</span><span class="p">]</span>
<span class="n">hts</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">188.0</span><span class="p">,</span> <span class="mf">191.0</span><span class="p">,</span> <span class="mf">183.0</span><span class="p">])</span>
<span class="n">wts</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">95.0</span><span class="p">,</span> <span class="mf">101.0</span><span class="p">,</span> <span class="mf">74.0</span><span class="p">])</span>

<span class="o">%</span><span class="n">lprun</span> <span class="o">-</span><span class="n">f</span> <span class="n">convert_units</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">Timer</span> <span class="n">unit</span><span class="p">:</span> <span class="mf">1e-06</span> <span class="n">s</span>

<span class="n">Total</span> <span class="n">time</span><span class="p">:</span> <span class="mf">0.000159</span> <span class="n">s</span>
<span class="n">File</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">76</span><span class="o">-</span><span class="mf">09e195816</span><span class="n">b85</span><span class="o">&gt;</span>
<span class="n">Function</span><span class="p">:</span> <span class="n">convert_units</span> <span class="n">at</span> <span class="n">line</span> <span class="mi">1</span>

<span class="n">Line</span> <span class="c1">#      Hits         Time  Per Hit   % Time  Line Contents
</span><span class="o">==============================================================</span>
     <span class="mi">1</span>                                           <span class="k">def</span> <span class="nf">convert_units</span><span class="p">(</span><span class="n">heroes</span><span class="p">,</span> <span class="n">heights</span><span class="p">,</span> <span class="n">weights</span><span class="p">):</span>
     <span class="mi">2</span>         <span class="mi">1</span>        <span class="mf">144.0</span>    <span class="mf">144.0</span>     <span class="mf">90.6</span>      <span class="n">new_hts</span> <span class="o">=</span> <span class="p">[</span><span class="n">ht</span> <span class="o">*</span> <span class="mf">0.39370</span> <span class="k">for</span> <span class="n">ht</span> <span class="ow">in</span> <span class="n">heights</span><span class="p">]</span>
     <span class="mi">3</span>         <span class="mi">1</span>          <span class="mf">5.0</span>      <span class="mf">5.0</span>      <span class="mf">3.1</span>      <span class="n">new_wts</span> <span class="o">=</span> <span class="p">[</span><span class="n">wt</span> <span class="o">*</span> <span class="mf">2.20462</span> <span class="k">for</span> <span class="n">wt</span> <span class="ow">in</span> <span class="n">weights</span><span class="p">]</span>
     <span class="mi">4</span>                                           
     <span class="mi">5</span>         <span class="mi">1</span>          <span class="mf">1.0</span>      <span class="mf">1.0</span>      <span class="mf">0.6</span>      <span class="n">hero_data</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="mi">6</span>                                               
     <span class="mi">7</span>         <span class="mi">4</span>          <span class="mf">4.0</span>      <span class="mf">1.0</span>      <span class="mf">2.5</span>      <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">hero</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">heroes</span><span class="p">):</span>
     <span class="mi">8</span>         <span class="mi">3</span>          <span class="mf">4.0</span>      <span class="mf">1.3</span>      <span class="mf">2.5</span>          <span class="n">hero_data</span><span class="p">[</span><span class="n">hero</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_hts</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">new_wts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
     <span class="mi">9</span>                                           
    <span class="mi">10</span>         <span class="mi">1</span>          <span class="mf">1.0</span>      <span class="mf">1.0</span>      <span class="mf">0.6</span>      <span class="k">return</span> <span class="n">hero_data</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="quick-and-dirty-approach">Quick and dirty approach</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="n">nums_list</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
<span class="n">sys</span><span class="p">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">nums_list</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">9120</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">pip install memory_profiler</code> 표준라이브러리가 아니기 때문에, 따로 다운 받아야합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">load_ext</span> <span class="n">memory_profiler</span>

<span class="o">%</span><span class="n">mprun</span> <span class="o">-</span><span class="n">f</span> <span class="n">convert_units</span> <span class="n">convert_units</span><span class="p">(</span><span class="n">heroes</span><span class="p">,</span> <span class="n">hts</span><span class="p">,</span> <span class="n">wts</span><span class="p">)</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="3-efficiently-combining-counting-and-iterating">3. Efficiently combining, counting, and iterating</h2>
<p><br /></p>

<h4 id="zip">Zip</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Bulbasaur'</span><span class="p">,</span> <span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Squirtle'</span><span class="p">]</span>
<span class="n">hps</span> <span class="o">=</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">44</span><span class="p">]</span>

<span class="n">combined_zip</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">hps</span><span class="p">)</span>
<span class="k">print</span><span class="p">([</span><span class="o">*</span><span class="n">combined</span><span class="p">])</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[(</span><span class="s">'Bulbasaur'</span><span class="p">,</span> <span class="mi">45</span><span class="p">),</span> <span class="p">(</span><span class="s">'Charmander'</span><span class="p">,</span> <span class="mi">39</span><span class="p">),</span> <span class="p">(</span><span class="s">'Squirtle'</span><span class="p">,</span> <span class="mi">44</span><span class="p">)]</span>
</code></pre></div></div>

<h4 id="collections">Collections</h4>

<ul>
  <li>namedtuple</li>
  <li>deque</li>
  <li>Counter</li>
  <li>OrderedDict</li>
  <li>defaultdict</li>
</ul>

<h4 id="counter">Counter</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="n">poke_tpyes</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Dark'</span><span class="p">,</span> <span class="s">'Fire'</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">]</span>
<span class="n">Counter</span><span class="p">(</span><span class="n">poke_tpyes</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">Counter</span><span class="p">({</span><span class="s">'Dark'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'Fire'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'Grass'</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</code></pre></div></div>

<h4 id="itertools">itertools</h4>

<ul>
  <li>product</li>
  <li>permutations</li>
  <li>combinations</li>
</ul>

<h4 id="combinations">Combinations</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="n">poke_tpyes</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Dark'</span><span class="p">,</span> <span class="s">'Fire'</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">,</span><span class="s">'Ghost'</span><span class="p">]</span>
<span class="k">print</span><span class="p">([</span><span class="o">*</span><span class="n">combinations</span><span class="p">(</span><span class="n">poke_tpyes</span><span class="p">,</span><span class="mi">2</span><span class="p">)])</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[(</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Dark'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Fire'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Grass'</span><span class="p">,</span> <span class="s">'Ghost'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Dark'</span><span class="p">,</span> <span class="s">'Fire'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Dark'</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Dark'</span><span class="p">,</span> <span class="s">'Ghost'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Fire'</span><span class="p">,</span> <span class="s">'Fries'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Fire'</span><span class="p">,</span> <span class="s">'Ghost'</span><span class="p">),</span> <span class="p">(</span><span class="s">'Fries'</span><span class="p">,</span> <span class="s">'Ghost'</span><span class="p">)]</span>
</code></pre></div></div>

<h4 id="set-theory">Set theory</h4>

<ul>
  <li>intersection()</li>
  <li>difference()</li>
  <li>symmetric_difference()</li>
  <li>union()</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list_a</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Bulbasaur'</span><span class="p">,</span> <span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Squirtle'</span><span class="p">]</span>
<span class="n">list_b</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Caterpie'</span><span class="p">,</span> <span class="s">'Pidgey'</span><span class="p">,</span> <span class="s">'Squirtle'</span><span class="p">]</span>

<span class="n">set_a</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">list_a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">set_a</span><span class="p">)</span>

<span class="n">set_b</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">list_b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">set_b</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">set_a</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set_b</span><span class="p">))</span> <span class="c1"># set_a &amp; set_b
</span><span class="k">print</span><span class="p">(</span><span class="n">set_a</span><span class="p">.</span><span class="n">difference</span><span class="p">(</span><span class="n">set_b</span><span class="p">))</span> <span class="c1"># set_a -set_b
</span><span class="k">print</span><span class="p">(</span><span class="n">set_b</span><span class="p">.</span><span class="n">difference</span><span class="p">(</span><span class="n">set_a</span><span class="p">))</span> <span class="c1"># set_b -set_a
</span><span class="k">print</span><span class="p">(</span><span class="n">set_a</span><span class="p">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">set_b</span><span class="p">))</span> <span class="c1"># set_a ^ set_b
</span><span class="k">print</span><span class="p">(</span><span class="n">set_a</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">set_b</span><span class="p">))</span> <span class="c1"># set_a | set_b
</span>
<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">{</span><span class="s">'Squirtle'</span><span class="p">,</span> <span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Bulbasaur'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Caterpie'</span><span class="p">,</span> <span class="s">'Squirtle'</span><span class="p">,</span> <span class="s">'Pidgey'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Squirtle'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Bulbasaur'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Caterpie'</span><span class="p">,</span> <span class="s">'Pidgey'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Caterpie'</span><span class="p">,</span> <span class="s">'Bulbasaur'</span><span class="p">,</span> <span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Pidgey'</span><span class="p">}</span>
<span class="p">{</span><span class="s">'Pidgey'</span><span class="p">,</span> <span class="s">'Charmander'</span><span class="p">,</span> <span class="s">'Caterpie'</span><span class="p">,</span> <span class="s">'Squirtle'</span><span class="p">,</span> <span class="s">'Bulbasaur'</span><span class="p">}</span>
</code></pre></div></div>

<table>
  <tbody>
    <tr>
      <td>저는 주로 &amp;, -, +,</td>
      <td>, ^ 이런 기호사용하는 것을 선호합니다.</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names_list</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)]</span>
<span class="n">names_tuple</span> <span class="o">=</span> <span class="p">([</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)])</span>
<span class="n">names_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="o">*</span><span class="nb">range</span><span class="p">(</span><span class="mi">1000</span><span class="p">)])</span>

<span class="o">%</span><span class="n">timeit</span> <span class="mi">200</span> <span class="ow">in</span> <span class="n">names_list</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">3.12</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
    
<span class="o">%</span><span class="n">timeit</span> <span class="mi">200</span> <span class="ow">in</span> <span class="n">names_tuple</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">15.73</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">3.11</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
    
<span class="o">%</span><span class="n">timeit</span> <span class="mi">200</span> <span class="ow">in</span> <span class="n">names_set</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">27.37</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">10000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">57.5</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">primary_types</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">unique_type</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">primary_types</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">unique_type</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div>
<p>중복처리하려고 자주사용합니다.</p>

<h4 id="looping-in-python">Looping in Python</h4>

<ul>
  <li>for</li>
  <li>while</li>
  <li>“nested”</li>
</ul>

<blockquote>
  <p>플랫이 중첩보다 낫다</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">poke_stats</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">90</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">60</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">90</span><span class="p">],</span>
              <span class="p">[</span><span class="mi">65</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">75</span><span class="p">]]</span>

<span class="n">totals</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">:</span>
    <span class="n">totals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
<span class="o">----------------------------------</span>
<span class="n">totals_comp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">]</span>
<span class="o">----------------------------------</span>
<span class="n">totals_map</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">poke_stats</span><span class="p">)]</span>


<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mi">317</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">330</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="n">totals</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">:</span>
    <span class="n">totals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
    
<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">4.79</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">1000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">776</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
    
    
<span class="o">%</span><span class="n">timeit</span> <span class="n">totals_comp</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">]</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">6.80</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">1000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">765</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
    

<span class="o">%</span><span class="n">timeit</span> <span class="n">totals_map</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">poke_stats</span><span class="p">)]</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">7.63</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">1000000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">663</span> <span class="n">ns</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p>maps를 이용하는 방법이 한줄로 깔끔하면서, 속도도 제일 빠름!</p>

<h4 id="numpy를-이용한-방법">Numpy를 이용한 방법</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">avgs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">:</span>
    <span class="n">avg</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
    <span class="n">avgs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">avgs</span><span class="p">)</span>
<span class="o">------------------------</span>
<span class="c1"># Numpy 사용
</span><span class="n">avgs_np</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">poke_stats</span><span class="p">).</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">avgs_np</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="p">[</span><span class="mf">79.25</span> <span class="mf">37.5</span>  <span class="mf">82.5</span> <span class="p">]</span>
<span class="o">--------------------------</span>
<span class="o">%%</span><span class="n">timeit</span>
<span class="n">avgs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">poke_stats</span><span class="p">:</span>
    <span class="n">avg</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
    <span class="n">avgs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">avg</span><span class="p">)</span>
    
<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">34.2</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
<span class="o">-------------------------</span>
<span class="o">%</span><span class="n">timeit</span> <span class="n">avgs_np</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">poke_stats</span><span class="p">).</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">14.21</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">13.5</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<h4 id="wrtting-better-loops">Wrtting better loops</h4>
<p><br />
가능한, loop문에서 실행되지 않아도 되는 코드는 외부로 뺴라!</p>

<hr />

<h2 id="4-basic-pandas-optimizations">4. Basic pandas optimizations</h2>
<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 비효율적인 방법 !
</span><span class="o">%%</span><span class="n">timeit</span>
<span class="n">win_perc_list</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">baseball_df</span><span class="p">)):</span>
    <span class="n">row</span> <span class="o">=</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">wins</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'W'</span><span class="p">]</span>
    <span class="n">games_played</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'G'</span><span class="p">]</span>
    <span class="n">win_perc</span> <span class="o">=</span> <span class="n">calc_win_perc</span><span class="p">(</span><span class="n">wins</span><span class="p">,</span> <span class="n">games_played</span><span class="p">)</span>
    <span class="n">win_perc_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">win_perc</span><span class="p">)</span>

<span class="n">baseball_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">]</span> <span class="o">=</span> <span class="n">win_perc_list</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">1</span> <span class="n">loop</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">226</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>
<h4 id="iterrows">iterrows()</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># iterrows() 이용! - enumerate랑 비슷하네요
</span><span class="o">%%</span><span class="n">timeit</span>
<span class="n">win_perc_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="n">wins</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'W'</span><span class="p">]</span>
    <span class="n">games_played</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'G'</span><span class="p">]</span>
    <span class="n">win_perc</span> <span class="o">=</span> <span class="n">calc_win_perc</span><span class="p">(</span><span class="n">wins</span><span class="p">,</span> <span class="n">games_played</span><span class="p">)</span>
    <span class="n">win_perc_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">win_perc</span><span class="p">)</span>

<span class="n">baseball_df</span><span class="p">[</span><span class="s">'WP'</span><span class="p">]</span> <span class="o">=</span> <span class="n">win_perc_list</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">10</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">128</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p>iterrows() 를이용하는 방법이 이용하지 않는 것 보다 약 2배정도 빠름</p>

<h4 id="itertuples">itertuples()</h4>

<p>collections 모듈 내 특수 데이터  유형을 반환합니다. 데이터 유형은 Python의 튜플처럼 작동하지만, 속성 조회를 사용하여 엑세스 할 수 있는 필드가 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">timeit</span>
<span class="k">for</span> <span class="n">row_nametuple</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">itertuples</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">row_nametuple</span><span class="p">)</span>
    
<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">10</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">93.1</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
<span class="o">-----------------------------------------------</span>
<span class="o">%%</span><span class="n">timeit</span>
<span class="k">for</span> <span class="n">row_nametuple</span> <span class="ow">in</span> <span class="n">baseball_df</span><span class="p">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">row_nametuple</span><span class="p">)</span>
    
    
<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">1</span> <span class="n">loop</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">1.26</span> <span class="n">s</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<p>iterrows() 와 비교했을 때, 굉장히 빠른 속도를 보여줍니다.</p>

<h4 id="apply">apply()</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="n">baseball_df</span><span class="p">.</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">calc_win_perc</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">'RS'</span><span class="p">],</span> <span class="n">row</span><span class="p">[</span><span class="s">'RA'</span><span class="p">]),</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">10</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">30.5</span> <span class="n">ms</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

<h4 id="values">values</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wins_np</span> <span class="o">=</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'W'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">wins_np</span><span class="p">))</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">pandas</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">series</span><span class="p">.</span><span class="n">Series</span><span class="s">'&gt;
</span></code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wins_np</span> <span class="o">=</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'W'</span><span class="p">].</span><span class="n">values</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">wins_np</span><span class="p">))</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">numpy</span><span class="p">.</span><span class="n">ndarray</span><span class="s">'&gt;
</span></code></pre></div></div>

<blockquote>
  <p>values하면 numpy형식인거 처음알았네용..</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">baseball_df</span><span class="p">[</span><span class="s">'RS'</span><span class="p">].</span><span class="n">values</span> <span class="o">-</span>  <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RA'</span><span class="p">].</span><span class="n">values</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">array</span><span class="p">([</span>  <span class="mi">46</span><span class="p">,</span>  <span class="mi">100</span><span class="p">,</span>    <span class="mi">7</span><span class="p">,</span> <span class="p">...,</span>  <span class="mi">188</span><span class="p">,</span>  <span class="mi">110</span><span class="p">,</span> <span class="o">-</span><span class="mi">117</span><span class="p">])</span>
</code></pre></div></div>

<p>numpy 형식이기 때문에 한번에 계산 가능</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">timeit</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RS'</span><span class="p">].</span><span class="n">values</span> <span class="o">-</span>  <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RA'</span><span class="p">].</span><span class="n">values</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="n">The</span> <span class="n">slowest</span> <span class="n">run</span> <span class="n">took</span> <span class="mf">11.61</span> <span class="n">times</span> <span class="n">longer</span> <span class="n">than</span> <span class="n">the</span> <span class="n">fastest</span><span class="p">.</span> <span class="n">This</span> <span class="n">could</span> <span class="n">mean</span> <span class="n">that</span> <span class="n">an</span> <span class="n">intermediate</span> <span class="n">result</span> <span class="ow">is</span> <span class="n">being</span> <span class="n">cached</span><span class="p">.</span>
<span class="mi">100000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mf">7.83</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
    
    
<span class="o">%</span><span class="n">timeit</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RS'</span><span class="p">]</span> <span class="o">-</span> <span class="n">baseball_df</span><span class="p">[</span><span class="s">'RA'</span><span class="p">]</span>

<span class="p">[</span><span class="n">output</span><span class="p">]</span>
<span class="mi">10000</span> <span class="n">loops</span><span class="p">,</span> <span class="n">best</span> <span class="n">of</span> <span class="mi">5</span><span class="p">:</span> <span class="mi">201</span> <span class="n">µs</span> <span class="n">per</span> <span class="n">loop</span>
</code></pre></div></div>

:ET