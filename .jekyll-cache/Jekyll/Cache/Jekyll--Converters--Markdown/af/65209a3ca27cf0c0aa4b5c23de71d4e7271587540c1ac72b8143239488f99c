I"OD<h4 id="ec2-구축하기">EC2 구축하기</h4>

<p>먼저 운영할 서버의 필요에 따라 사양을 정하고 EC2 인스턴스를 선택합니다.</p>

<p>저는 여기서 Ubuntu Sever 20.04 LTS를 선택하였고, 프리티어로 진행하기 위해 t2.micro로 진행하였습니다.</p>

<p align="center"><img src="/images/post_img/spring1.png" /></p>

<p>이후 보안 설정을 제외하고 모든 설정은 기본값으로 설정하였습니다.</p>

<p align="center"><img src="/images/post_img/spring2.png" /></p>

<p>보안 설정같은 경우, 이후 서버가 정상적으로 작동하는지 확인하기 의해 모든 트래픽에 개방하였습니다. ( 절대 이러지 마세요. 필요한 포트만 개방하는 것을 추천드립니다. )</p>

<p>이후 키페어를 선택하고 EC2 환경을 구축하였습니다.</p>

<p><br /></p>

<h4 id="ec2-console">EC2 Console</h4>

<p>이후 EC2 인스턴스에 접속한 뒤, 환경을 세팅하였습니다.</p>

<p><br /></p>

<h4 id="java-install">Java install</h4>

<p>Spring Boots에 맡게 자바를 다운로드 해줍니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get upgrade
<span class="nb">sudo </span>apt-get <span class="nb">install </span>openjdk-11-jdk
</code></pre></div></div>

<p>저는 사용하는 jdk에 맞게 jdk-11을 install 했습니다.</p>

<p><br /></p>

<h4 id="환경변수-등록">환경변수 등록</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi ~/.bashrc
</code></pre></div></div>

<p>이후 영구적인 환경변수를 등록하기 위해 bashrc 파일을 수정하였습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="si">$(</span><span class="nb">dirname</span> <span class="si">$(</span><span class="nb">dirname</span> <span class="si">$(</span><span class="nb">readlink</span> <span class="nt">-f</span> <span class="si">$(</span>which java<span class="si">))))</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin

<span class="c"># 환경변수 세팅</span>
<span class="nb">export </span><span class="nv">DB_URL</span><span class="o">=</span>DB엔드포인트
<span class="nb">export </span><span class="nv">DB_NAME</span><span class="o">=</span>DB_USER
<span class="nb">export </span><span class="nv">DB_PASSWORD</span><span class="o">=</span>DB_PASSWORD
</code></pre></div></div>

<p>위와 같이 환경변수로 5개를 추가해 줬습니다. 위의 2개의 코드는 java를 환경변수에 등록하는 코드입니다.</p>

<p>아래 3개의 코드는, 사용중인 DB에 정상적으로 연결하기 위해 엔드포인트, 유저네임, 패스워드를 환경변수로 저장했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div></div>

<p>환경변수 등록을 완료하였으면, 위의 코드로 bashrc를 실행해줍니다.</p>

<p><br /></p>

<h4 id="install-gradle">Install Gradle</h4>

<p>Spring Boots를 빌드하는 방법은 크게 2가지가 있는데 저는 그 중 더 많이 사용하는 Gradle 방식을 사용합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VERSION</span><span class="o">=</span>7.1.1
wget https://services.gradle.org/distributions/gradle-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="nt">-P</span> /tmp
</code></pre></div></div>

<p>위의 코드를 통해 gradle을 먼저 다운로드 합니다.</p>

<p>spring boots에서 7.1.1버전을 따로 설정하지 않으면 오류가 나더라구요. 그래서 저는 버전을 설정했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>unzip
<span class="nb">sudo </span>unzip <span class="nt">-d</span> /opt/gradle /tmp/gradle-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip
<span class="nb">sudo ln</span> <span class="nt">-s</span> /opt/gradle/gradle-<span class="k">${</span><span class="nv">VERSION</span><span class="k">}</span> /opt/gradle/latest
</code></pre></div></div>

<p>이후 unzip을 사용하기 위해 다운로드하고, 다운받은 gradle을 계속해서 설치하였습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/profile.d/gradle.sh
</code></pre></div></div>

<p>위에서 환경변수를 한 것처럼, gradle에 변수를 추가하기 위해 vi 로 수정하였습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">GRADLE_HOME</span><span class="o">=</span>/opt/gradle/latest
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">GRADLE_HOME</span><span class="k">}</span>/bin:<span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>
</code></pre></div></div>

<p>추가한 코드는 위와같습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chmod</span> +x /etc/profile.d/gradle.sh
<span class="nb">source</span> /etc/profile.d/gradle.sh
</code></pre></div></div>

<p>이후 chmod를 통해서 모드를 변경하고, 실행시켰습니다.</p>

<p><br /></p>

<h4 id="build">Build</h4>

<p>이제 모든 준비를 완료하고 gradle을 통한 build를 할 시간입니다.</p>

<p>준비된 spring boots 폴더에 접속하고 이를 빌드해줍니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gradle build
</code></pre></div></div>

<p>처음 빌드를 할 때는 다소 시간이 소요됩니다.</p>

<p>이후 빌드가 완료되면, build/libs/ 폴더에 jar 파일이 생성됩니다.</p>

<p align="center"><img src="/images/post_img/spring3.png" /></p>

<p>위와 같이 2개의 jar이 보일텐데, 이중 plain이 아닌 SNAPSHOT.jar를 실행시킬 예정입니다.</p>

<p>( 당연히 각자 본인의 설정에 따라 파일이름이 다릅니다. )</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> build/libs/[jar파일]

<span class="c"># java -jar build/libs/semogong-0.0.1-SNAPSHOT.jar</span>
</code></pre></div></div>

<p>위의 코드를 통해서 실행하면 서버가 실행되는 것을 알 수 있습니다.</p>

<p>이후 서버에 접속하기 위해서는 각자의 퍼블릭 IP주소:8080 를 입력하면 정상적으로 접속 할 수 있음을 알 수 있습니다.</p>

<p align="center"><img src="/images/post_img/spring4.png" /></p>

<p>저 같은 경우, 팀원들과 현재 진행중인 프로젝트 메인사이트가 잘 출력되네요.</p>

<p><br /></p>

<h4 id="docker-install">Docker install</h4>

<p>https://myjamong.tistory.com/299 블로그 글을 참고했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="se">\</span>
    apt-transport-https <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    gnupg <span class="se">\</span>
    lsb-release
</code></pre></div></div>

<p>apt가 HTTPS 프로토콜을 통해서 repository를 사용할 수 있도록 패키지를 설치</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
</code></pre></div></div>

<p>Docker의 공식 GPG key를 추가</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
</code></pre></div></div>

<p>apt source list에 repository를 추가</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce
<span class="nb">sudo </span>apt <span class="nb">install </span>docker.io

<span class="c">#check</span>
<span class="nb">sudo </span>docker ps
</code></pre></div></div>

<p>docker 설치</p>

<p><br /></p>

<h4 id="dockerfile-생성">Dockerfile 생성</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>Dockerfile
</code></pre></div></div>

<p>저는 touch 명령어를 통해 Dockerfile을 생성하였습니다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#Dockerfile</span>
<span class="k">FROM</span><span class="s"> openjdk:11-jre-slim</span>
<span class="k">ADD</span><span class="s"> target/semogong-0.0.1-SNAPSHOT.jar app.jar</span>
<span class="k">ENV</span><span class="s"> JAVA_OPTS=""</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["java","-jar","/app.jar"]</span>
</code></pre></div></div>

<p>이후 Dockerfile ADD에 추가한 것처럼, target폴더에 jar 파일을 copy했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir
cp </span>build/libs/semogong-0.0.1-SNAPSHOT.jar target/
</code></pre></div></div>

<p><br /></p>

<h4 id="docker-build">Docker build</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker build <span class="nt">--tag</span> semogong-demo:0.1 <span class="nb">.</span>
</code></pre></div></div>

<p>이제 위에서 생성한 Dockerfile을 빌드합니다. 맨 뒤에 . 을 꼭 입력해주세요.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker run <span class="nt">-p</span> 8080:8080 <span class="nt">-e</span> <span class="nv">DB_URL</span><span class="o">=</span><span class="nv">$DB_URL</span> <span class="nt">-e</span> <span class="nv">DB_NAME</span><span class="o">=</span><span class="nv">$DB_NAME</span> <span class="nt">-e</span> <span class="nv">DB_PASSWORD</span><span class="o">=</span><span class="nv">$DB_PASSWORD</span> semogong-demo:0.1
</code></pre></div></div>

<p>위와 같이, 이미지를 통해 실행하면 위에서 실행했던 서버와 동일하게 실행됩니다.</p>

<p><br /></p>

<h4 id="docker-hub로-이미지-올리기">Docker hub로 이미지 올리기</h4>

<p align="center"><img src="/images/post_img/spring5.png" /></p>

<p>저는 Docker hub에 레파지토리를 생성해놨습니다. 각자 원하는 이름으로 생성하면 됩니다.</p>

<p align="center"><img src="/images/post_img/spring6.png" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker tag 9f5351093984 wjdqlsdlsp/semogong
</code></pre></div></div>

<p>위의 코드를 통해서 이미지 태그를 설정합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker login
</code></pre></div></div>

<p>이후 로그인을 합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker push wjdqlsdlsp/semogong
</code></pre></div></div>

<p>이제 docker hub로 push 하면 완료됩니다.</p>

<p><br /></p>

<h4 id="kubernetes-배포하기">Kubernetes 배포하기</h4>

<p>저는 gcp kubernetes engine 환경에서 진행합니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl run semogong <span class="nt">--image</span><span class="o">=</span>wjdqlsdlsp/semogong <span class="nt">--port</span> 8080 <span class="nt">--dry-run</span> <span class="nt">-o</span> yaml <span class="o">&gt;</span> semogong.yaml
</code></pre></div></div>

<p>먼저 docker hub로 push 한 이미지를 이용해서 pods를 운영할 예정인데, 이전에 환경변수등을 변경하기 위해 yaml 파일채로 다운로드합니다.</p>

<p>이후 vi를 통한 yaml에 환경변수값을 추가합니다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">creationTimestamp</span><span class="pi">:</span> <span class="no">null</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">run</span><span class="pi">:</span> <span class="s">semogong</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">semogong</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">image</span><span class="pi">:</span> <span class="s">wjdqlsdlsp/semogong</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">semogong</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">환경변수_name</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s">환경변수_value</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="na">resources</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">dnsPolicy</span><span class="pi">:</span> <span class="s">ClusterFirst</span>
  <span class="na">restartPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>저는 위와같이 구성했습니다. spec - containers - env에 원하는 환경변수를 추가하면됩니다.</p>

<p>( yaml에서 $환경변수이름 으로 환경변수 넘겨주려고했는데, 노드가 달라서 그런지 안넘어가고 오류가 나더라구요. )</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create <span class="nt">-f</span> semogong.yaml
</code></pre></div></div>

<p>이제 수정한 yaml파일을 실행하면됩니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods
NAME       READY   STATUS    RESTARTS   AGE
semogong   1/1     Running   1          27s
</code></pre></div></div>

<p>kubectl get pods를 통해 실행한 pods가 정상적으로 작동하는지 체크해주세요 ( STATUS 확인 )</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl expose pod semogong <span class="nt">--name</span><span class="o">=</span>semogong <span class="nt">--type</span><span class="o">=</span>LoadBalancer <span class="nt">--port</span> 80 <span class="nt">--target-port</span> 8080
</code></pre></div></div>

<p>이제 해당 pod를 서비스화 시키기위해 expose명령어로 노출시켜줍니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get service
NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>        AGE
kubernetes   ClusterIP      10.120.0.1     &lt;none&gt;        443/TCP        13m
semogong     LoadBalancer   10.120.7.169   34.64.193.53   80:31347/TCP   93s
</code></pre></div></div>

<p>kubectl get service 명령어로 EXTERNAL-IP를 접속하고 해당 주소로 접속하면 됩니다.</p>

<p>저의 경우 34.64.193.53:80 주소로 접속하면 접속이 되겠네요. ( 80번포트는 생략가능 )</p>

<p><br /></p>

:ET