I"<h1 id="docker-기본기-익히기">Docker 기본기 익히기</h1>

<p><br /></p>

<h4 id="docker-간단한-컨테이너-만들기">Docker 간단한 컨테이너 만들기</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>☁  ~  docker run ubuntu:20.04

Unable to find image <span class="s1">'ubuntu:20.04'</span> locally
20.04: Pulling from library/ubuntu
185e8a4c1005: Already exists
Digest: sha256:9101220a875cee98b016668342c489ff0674f247f6ca20dfc91b91c0f28581ae
Status: Downloaded newer image <span class="k">for </span>ubuntu:20.04
</code></pre></div></div>

<p>run 명령어를 통해서 간단하게 ubuntu 환경을 만들 수 있습니다.</p>

<p>local 환경에 이미지가 없음을 파악하고, 해당 이미지를 pull해서 실행시킵니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>☁  ~  docker ps

CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
</code></pre></div></div>

<p>하지만 docker ps 를 통해 실행중인 컨테이너를 확인하면 아무것도 없는 것을 알 수 있습니다.</p>

<p>docker 컨테이너가 실행되고 정상적으로 종료되었기 때문에 아무것도 없는 상황입니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>☁  ~  docker run <span class="nt">--rm</span> <span class="nt">-it</span> ubuntu:20.04 /bin/sh

<span class="c"># ls</span>
bin  boot  dev	etc  home  lib	media  mnt  opt  proc  root  run  sbin	srv  sys  tmp  usr  var
</code></pre></div></div>

<p>위의 코드로 실행하면, ubuntu shell로 접속한 상황임을 알 수 있습니다.</p>

<p>접속된 상황에서 ls 명령어등 우분투 명령어를 실행하면 다음과 같이 ubuntu환경에서 명령어가 사용됩니다.</p>

<p>위에서 사용한 옵션을 살펴보면</p>

<p><code class="language-plaintext highlighter-rouge">--rm</code> : 먼저 rm 옵션은 컨테이너가 종료됨과 동시에 컨테이너를 삭제하겠다는 의미입니다.</p>

<p><code class="language-plaintext highlighter-rouge">-it</code> : -i 와 -t 옵션을 한번에 입력한 것으로, 터미널 입력을 위한 옵션입니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">-p</span> 1234:6379 redis
</code></pre></div></div>

<p>다음은 port설정방법입니다. 이를 테스트 하기 위해서 redis 컨테이너를 사용해보도록 하겠습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet localhost 1234

<span class="nb">set </span>hello world
+OK
get hello
<span class="nv">$5</span>
world
quit
</code></pre></div></div>

<p>위의 코드를 실행하고 telnet 명령어로 접속을 하면 정상적으로 연결되는것을 확인 할 수 있습니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop <span class="o">[</span>container <span class="nb">id </span>or container name]
</code></pre></div></div>

<p>stop 명령어를 통해 컨테이너를 중지할 수 있습니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">rm</span> <span class="o">[</span>container <span class="nb">id </span>or container name]
</code></pre></div></div>

<p>rm명령어를 통해 삭제할 수 있습니다</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull <span class="o">[</span>이미지]
</code></pre></div></div>

<p>이미지를 pull 하는 방법은 위와 같습니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi <span class="o">[</span>image <span class="nb">id </span>or image name]
</code></pre></div></div>

<p>이미지 삭제하는방법은 rmi 명령어를 사용합니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network create <span class="o">[</span>network name]
</code></pre></div></div>

<p>위의 명령어를 통해 가상의 네트워크를 생성 할 수 있습니다.</p>

<p>이후 –network 옵션을 통해서 동일 네트워크로 묶을 수 있습니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker stop mysql
docker <span class="nb">rm </span>mysql
docker run <span class="nt">-d</span> <span class="nt">-p</span> 3306:3306 <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
  <span class="nt">--network</span><span class="o">=</span>app-network <span class="se">\</span>
  <span class="nt">--name</span> mysql <span class="se">\</span>
  <span class="nt">-v</span> /my/own/datadir:/var/lib/mysql <span class="se">\</span>
  mysql:5.7
</code></pre></div></div>

<p>위와 같이 -v 옵션을 통해서, 볼륨을 지정할 수 있습니다.</p>

<p><br /></p>

<h4 id="docker-compose">docker-compose</h4>

<p>이전에 사용했던 코드들을 yaml파일을 통해서 간단하게 docker 운영 가능</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">db</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mariadb:10.5</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./mysql:/var/lib/mysql</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">MYSQL_ROOT_PASSWORD</span><span class="pi">:</span> <span class="s">wordpress</span>
      <span class="na">MYSQL_DATABASE</span><span class="pi">:</span> <span class="s">wordpress</span>
      <span class="na">MYSQL_USER</span><span class="pi">:</span> <span class="s">wordpress</span>
      <span class="na">MYSQL_PASSWORD</span><span class="pi">:</span> <span class="s">wordpress</span>
  <span class="na">wordpress</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">wordpress:latest</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./wp:/var/www/html</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8000:80"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">WORDPRESS_DB_HOST</span><span class="pi">:</span> <span class="s">db:3306</span>
      <span class="na">WORDPRESS_DB_USER</span><span class="pi">:</span> <span class="s">wordpress</span>
      <span class="na">WORDPRESS_DB_PASSWORD</span><span class="pi">:</span> <span class="s">wordpress</span>
</code></pre></div></div>

<p><a href="https://subicura.com/">subicura 블로그</a>에서 가져온 yaml 코드 예시입니다. ( subicura님 블로그 가면 잘 설명되어 있습니다. )</p>

:ET