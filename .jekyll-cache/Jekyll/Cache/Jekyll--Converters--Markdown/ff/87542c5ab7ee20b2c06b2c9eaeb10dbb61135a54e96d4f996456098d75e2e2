I"D1<blockquote>
  <p>본 포스트는, Terraform Up &amp; Running 테라폼 - OREILLY를 참고했습니다.</p>
</blockquote>

<p>이번 포스트에서는 Terraform을 이용해서 AutoScale group을 만들고, 이를 연결해주는 Application Loadbalancer를 생성하려고 합니다.</p>

<p>이전 단계에서 사용했던 내용보다 조금 더 깊이 들어가서 따라가기 힘드니, 천천히 따라와 주세요.. ( 절대 제가 힘들어서 그런게 아닙니다. )</p>

<hr />

<h3 id="data">data</h3>

<p>이전에서 var, output을 사용했다면, 이번에는 data 입니다.</p>

<p>data는 기존에 있는 리소스의 정보를 가져온다고 생각하면 됩니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data <span class="s2">"aws_vpc"</span> <span class="s2">"default"</span> <span class="o">{</span>
  default <span class="o">=</span> <span class="nb">true</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위와 같이, 설정하면 default로 설정한 vpc의 정보를 가져오게 됩니다.</p>

<p>이를 terraform에 적용해서 terraform으로 생성한 리소스처럼 사용할 수 있게 됩니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data <span class="s2">"aws_subnet_ids"</span> <span class="s2">"default"</span> <span class="o">{</span>
  vpc_id <span class="o">=</span> data.aws_vpc.default.id
<span class="o">}</span>
</code></pre></div></div>

<p>이번 포스트에서는 2개의 data를 사용합니다.</p>

<p>하나는 vpc, 다른 하나는 vpc에 생성되어 있는 subnet정보입니다.</p>

<hr />

<h3 id="launch_configuration-정의하기">launch_configuration 정의하기</h3>

<p>Launch_configuration은 생성될 ec2에 대한 정의입니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_launch_configuration"</span> <span class="s2">"example"</span> <span class="o">{</span>
  image_id      <span class="o">=</span> <span class="s2">"ami-0ea5eb4b05645aa8a"</span>
  instance_type <span class="o">=</span> <span class="s2">"t3.nano"</span>
  security_groups <span class="o">=</span> <span class="o">[</span>aws_security_group.instance.id]

  user_data <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span><span class="sh">
              #!/bin/bash
              echo "Hello, world" &gt; index.html
              nohup busybox httpd -f -p 8080 &amp;
</span><span class="no">              EOF

</span>  lifecycle <span class="o">{</span>
    create_before_destroy <span class="o">=</span> <span class="nb">true</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기존에 정의했던 ec2에서 lifecycle이 추가되는데, 이는 lifecycle을 위와 같이 설정하지 않을 경우, 생성되어있는 리소스에 대한 참조가 있기 때문에 리소스를 수정, 삭제 할 수 없습니다.</p>

<p>이를 방지 하기 위해 lifecycle을 설정해서 삭제가능하게 합니다.</p>

<hr />

<h3 id="autoscaling_group-정의하기">autoscaling_group 정의하기</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_autoscaling_group"</span> <span class="s2">"example"</span> <span class="o">{</span>
  min_size <span class="o">=</span> 2
  max_size <span class="o">=</span> 10

  launch_configuration <span class="o">=</span> aws_launch_configuration.example.name
  vpc_zone_identifier <span class="o">=</span> data.aws_subnet_ids.default.ids

  target_group_arns <span class="o">=</span> <span class="o">[</span>aws_lb_target_group.asg.arn]
  health_check_type <span class="o">=</span> <span class="s2">"ELB"</span>

  tag <span class="o">{</span>
    key <span class="o">=</span> <span class="s2">"Name"</span>
    value <span class="o">=</span> <span class="s2">"terraform-asg-example"</span>
    propagate_at_launch <span class="o">=</span> <span class="nb">true</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에서 설정한 launch_configuration을 이용해서 autoscaling_group을 생성합니다.</p>

<p>최소 사이즈와 최대 사이즈를 설정하고 data를 통해 받아온 vpc_zone_identifier를 설정합니다.</p>

<p>여기서 vpc의 subnet은 서로 다른 두개의 가용지역으로 구성되어야 합니다. (만약 2개 이상의 subnet이 없다면 생성해주세요)</p>

<p>target_group_arns 이라는게 있는데, 이는 이후에 생성하게 될 loadbalancer의 arn입니다.</p>

<p>arn이란 Amazon Resource Number로, AWS에서 생성되는 리소스에 대한 일련번호라고 이해하시면 됩니다.</p>

<p>Health_check_type의 경우 aws loadbalancer를 칭하는 ELB로 설정했습니다.</p>

<hr />

<h3 id="load-balancer-정의하기">Load Balancer 정의하기</h3>

<p>이 부분부터 혼동이 많이옵니다…</p>

<p>설정해야 할 내용은 크게 4개입니다.</p>

<ul>
  <li>aws_lb</li>
  <li>aws_lb_listener</li>
  <li>aws_lb_target_group</li>
  <li>aws_lb_listener_rule</li>
</ul>

<p>위에서 부터 천천히 진행하도록 합니다.</p>

<hr />

<h3 id="aws_lb">aws_lb</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_lb"</span> <span class="s2">"example"</span> <span class="o">{</span>
  name <span class="o">=</span> <span class="s2">"terraform-asg-example"</span>
  load_balancer_type <span class="o">=</span> <span class="s2">"application"</span>
  subnets <span class="o">=</span> data.aws_subnet_ids.default.ids
  security_groups <span class="o">=</span> <span class="o">[</span>aws_security_group.alb.id]
<span class="o">}</span>
</code></pre></div></div>

<p>aws_lb의 경우 어떤 타입의 로드밸런서를 어느 서브넷에 어떤 보안규칙으로 설정할 지 정의합니다.</p>

<h3 id="aws_lb_listener">aws_lb_listener</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_lb_listener"</span> <span class="s2">"http"</span> <span class="o">{</span>
  load_balancer_arn <span class="o">=</span> aws_lb.example.arn
  port <span class="o">=</span> 80
  protocol <span class="o">=</span> <span class="s2">"HTTP"</span>

  default_action <span class="o">{</span>
    <span class="nb">type</span> <span class="o">=</span> <span class="s2">"fixed-response"</span>

    fixed_response <span class="o">{</span>
      content_type <span class="o">=</span> <span class="s2">"text/plain"</span>
      message_body <span class="o">=</span> <span class="s2">"404: page not found"</span>
      status_code <span class="o">=</span> 404
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Lb_listener를 위와 같이 설정하면, 80번 포트를 통해서 수신하고, HTTP 프로토콜을 사용하며, 설정한 내용으로 응답을 보내지 않았을 경우, fixed_response로 설정한 404 메세지를 보내도록 액션을 취합니다.</p>

<h3 id="aws_lb_target_group">aws_lb_target_group</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_lb_target_group"</span> <span class="s2">"asg"</span> <span class="o">{</span>
  name <span class="o">=</span> <span class="s2">"terraform-asg-example"</span>
  port <span class="o">=</span> var.server_port
  protocol <span class="o">=</span> <span class="s2">"HTTP"</span>
  vpc_id <span class="o">=</span> data.aws_vpc.default.id

  health_check <span class="o">{</span>
    path <span class="o">=</span> <span class="s2">"/"</span>
    protocol <span class="o">=</span> <span class="s2">"HTTP"</span>
    matcher <span class="o">=</span> <span class="s2">"200"</span>
    interval <span class="o">=</span> 15
    <span class="nb">timeout</span> <span class="o">=</span> 3
    healthy_threshold <span class="o">=</span> 2
    unhealthy_threshold <span class="o">=</span> 2
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>target_group의 경우, 어떤 규칙을 이용해서 target을 정하는지를 정의합니다.</p>

<p>여기선 변수로 받을 sever_port를 이용해서 통신하고, HTTP프로토콜을 사용하도록 구성합니다.</p>

<p>이후, data를 통해 받은 vpc_id를 설정합니다.</p>

<p>또한 health_check 규칙이 있는데, 어떤 방법으로 health check를 할지 정의합니다.</p>

<h3 id="aws_lb_listener_rule">aws_lb_listener_rule</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_lb_listener_rule"</span> <span class="s2">"asg"</span> <span class="o">{</span>
  listener_arn <span class="o">=</span> aws_lb_listener.http.arn
  priority <span class="o">=</span> 100

  action <span class="o">{</span>
    <span class="nb">type</span> <span class="o">=</span> <span class="s2">"forward"</span>
    target_group_arn <span class="o">=</span> aws_lb_target_group.asg.arn
  <span class="o">}</span>
  condition <span class="o">{</span>
    path_pattern <span class="o">{</span>
      values <span class="o">=</span> <span class="o">[</span><span class="s2">"*"</span><span class="o">]</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>마지막으로 listener rule을 구성해서 생성한 target_group과 load balancer를 연결해줍니다.</p>

<hr />

<h3 id="security-group">security group</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resource <span class="s2">"aws_security_group"</span> <span class="s2">"alb"</span> <span class="o">{</span>
  name <span class="o">=</span> <span class="s2">"terraform-example-alb"</span>

  ingress <span class="o">{</span>
    from_port <span class="o">=</span> 80
    protocol  <span class="o">=</span> <span class="s2">"tcp"</span>
    to_port   <span class="o">=</span> 80
    cidr_blocks <span class="o">=</span> <span class="o">[</span><span class="s2">"0.0.0.0/0"</span><span class="o">]</span>
  <span class="o">}</span>

  egress <span class="o">{</span>
    from_port <span class="o">=</span> 0
    protocol  <span class="o">=</span> <span class="s2">"-1"</span>
    to_port   <span class="o">=</span> 0
    cidr_blocks <span class="o">=</span> <span class="o">[</span><span class="s2">"0.0.0.0/0"</span><span class="o">]</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이전에 설정한 security group과 다르게, ingress와 egress를 설정해줘야 합니다.</p>

<p>Health check를 통해 결과를 받아 들여야 하기 때문에, egress를 추가합니다.</p>

<p>여기서 egress는 포트와 상관없이 허용(0)하도록 설계 했습니다.</p>

<hr />

<h3 id="output-설정하기">Output 설정하기</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output <span class="s2">"alb_dns_name"</span> <span class="o">{</span>
  value <span class="o">=</span> aws_lb.example.dns_name
  description <span class="o">=</span> <span class="s2">"The domain name of the load balancer"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 부분은 필수는 아니지만, 편의를 위해 설정합니다.</p>

<p>정상적으로 alb 및 autoscaling이 완성되면 alb의 dns를 출력합니다.</p>

<hr />

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform apply <span class="nt">-parallelism</span><span class="o">=</span>30 
</code></pre></div></div>

<p>모든 리소스 코드가 준비되었다면 apply해줍니다.</p>

<p>여기서 -parallelism값을 설정했는데, 병렬처리처럼 더 빠르게 생성하도록 설정했습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://[alb_dns_name]
</code></pre></div></div>

<p>완료되었다면, output으로 나온 값을 이용해서 테스트해보세요.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>terraform destroy
</code></pre></div></div>

<p>실습을 마쳤다면 부셔주세요… 과금을 막을 방법입니다.</p>

<hr />

:ET